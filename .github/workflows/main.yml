# name: üöÄ CI/CD Deploy to MonsterASP

# on:
#   push:
#     branches:
#       - main # or master

# jobs:
#   build-and-deploy:
#     runs-on: windows-latest

#     steps:
#     - name: üì• Checkout code
#       uses: actions/checkout@v4

#     - name: üõ† Setup .NET SDK
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: '8.x' # or your project version

#     - name: üß± Restore dependencies
#       run: dotnet restore

#     - name: üèó Build
#       run: dotnet build --configuration Release

#     - name: üîë Replace all appsettings.json secrets from GitHub Actions
#       shell: pwsh
#       run: |
#         $appSettingsPath = 'src/its.gamify.api/appsettings.json'
#         $json = Get-Content $appSettingsPath | ConvertFrom-Json

#         # Replace ConnectionStrings.DefaultConnection
#         $json.ConnectionStrings.DefaultConnection = "${{ secrets.CONNECTIONSTRINGS__DEFAULTCONNECTION }}"

#         # Replace FirebaseConfig values
#         $json.FirebaseConfig.Bucket = "${{ secrets.FIREBASECONFIG__BUCKET }}"
#         $json.FirebaseConfig.ServiceAccountAdmin = "${{ secrets.FIREBASECONFIG__SERVICEACCOUNTADMIN }}"
#         $json.FirebaseConfig.ServiceAccountPass = "${{ secrets.FIREBASECONFIG__SERVICEACCOUNTPASS }}"
#         $json.FirebaseConfig.ApiKey = "${{ secrets.FIREBASECONFIG__APIKEY }}"

#         # Convert back to JSON and save with proper formatting
#         $json | ConvertTo-Json -Depth 10 | Set-Content $appSettingsPath -Encoding UTF8

#         Write-Host "‚úÖ Configuration secrets injected successfully"

#     - name: üß™ Publish
#       run: dotnet publish -c Release -o publish_output

#     - name: üìÇ List publish output (Debug)
#       shell: pwsh
#       run: |
#         Write-Host "üìã Listing publish_output directory contents:"
#         Get-ChildItem -Path "publish_output" -Recurse | Select-Object FullName, Length

#     - name: üîç Test FTP Connection First
#       shell: pwsh
#       run: |
#         Write-Host "üîç Testing FTP connection to MonsterASP..."
#         try {
#           # Test basic FTP connection
#           $ftpRequest = [System.Net.FtpWebRequest]::Create("ftp://${{ secrets.FTP_SERVER }}/wwwroot/")
#           $ftpRequest.Credentials = New-Object System.Net.NetworkCredential("${{ secrets.FTP_USERNAME }}", "${{ secrets.FTP_PASSWORD }}")
#           $ftpRequest.Method = [System.Net.WebRequestMethods+Ftp]::ListDirectory
#           $ftpRequest.UsePassive = $true
#           $ftpRequest.UseBinary = $true
#           $ftpRequest.KeepAlive = $false

#           $response = $ftpRequest.GetResponse()
#           Write-Host "‚úÖ FTP connection successful!"
#           Write-Host "üìÇ Remote directory accessible: /wwwroot/"
#           $response.Close()
#         } catch {
#           Write-Host "‚ùå FTP connection test failed: $($_.Exception.Message)"
#           Write-Host "üîß Trying alternative connection method..."
#         }

#     - name: üìÇ List publish output (Debug)
#       shell: pwsh
#       run: |
#         Write-Host "üìã Listing publish_output directory contents:"
#         if (Test-Path "publish_output") {
#           Get-ChildItem -Path "publish_output" -Recurse | ForEach-Object {
#             Write-Host "$($_.FullName) - $($_.Length) bytes"
#           }
#           $totalFiles = (Get-ChildItem -Path "publish_output" -Recurse -File).Count
#           Write-Host "Total files to upload: $totalFiles"
#         } else {
#           Write-Host "‚ùå publish_output directory not found!"
#         }

#     - name: üöÄ Deploy via FTP to MonsterASP (Primary Method)
#       uses: SamKirkland/FTP-Deploy-Action@v4.3.4
#       with:
#         server: ${{ secrets.FTP_SERVER }}
#         username: ${{ secrets.FTP_USERNAME }}
#         password: ${{ secrets.FTP_PASSWORD }}
#         protocol: ftp
#         port: 21
#         server-dir: /wwwroot/
#         local-dir: ./publish_output/
#         state-name: .ftp-deploy-sync-state.json
#         dry-run: false
#         dangerous-clean-slate: false
#         exclude: |
#           **/.git*
#           **/.git*/**
#           **/node_modules/**
#           **/.DS_Store
#           .ftp-deploy-sync-state.json
#         log-level: verbose
#         security: loose
#         timeout: 300000

#     - name: üöÄ Deploy via FTP (Alternative Method)
#       if: failure()
#       uses: kevinpainchaud/simple-ftp-deploy-action@v1.2.1
#       with:
#         ftp_host: ${{ secrets.FTP_SERVER }}
#         ftp_username: ${{ secrets.FTP_USERNAME }}
#         ftp_password: ${{ secrets.FTP_PASSWORD }}
#         local_source_dir: "./publish_output"
#         dist_target_dir: "/wwwroot"
#         delete_before_upload: false

#     - name: üöÄ Deploy via FTP (PowerShell Backup)
#       if: failure()
#       shell: pwsh
#       run: |
#         Write-Host "üîÑ Attempting PowerShell FTP upload..."

#         function Upload-FtpFile {
#           param(
#             [string]$LocalPath,
#             [string]$RemotePath,
#             [string]$FtpServer,
#             [string]$Username,
#             [string]$Password
#           )

#           try {
#             $ftpRequest = [System.Net.FtpWebRequest]::Create("ftp://$FtpServer$RemotePath")
#             $ftpRequest.Credentials = New-Object System.Net.NetworkCredential($Username, $Password)
#             $ftpRequest.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile
#             $ftpRequest.UsePassive = $true
#             $ftpRequest.UseBinary = $true
#             $ftpRequest.KeepAlive = $false

#             $fileBytes = [System.IO.File]::ReadAllBytes($LocalPath)
#             $ftpRequest.ContentLength = $fileBytes.Length

#             $requestStream = $ftpRequest.GetRequestStream()
#             $requestStream.Write($fileBytes, 0, $fileBytes.Length)
#             $requestStream.Close()

#             $response = $ftpRequest.GetResponse()
#             Write-Host "‚úÖ Uploaded: $RemotePath"
#             $response.Close()
#             return $true
#           } catch {
#             Write-Host "‚ùå Failed to upload $RemotePath : $($_.Exception.Message)"
#             return $false
#           }
#         }

#         # Upload all files
#         $localDir = "publish_output"
#         $remoteDir = "/wwwroot"
#         $server = "${{ secrets.FTP_SERVER }}"
#         $username = "${{ secrets.FTP_USERNAME }}"
#         $password = "${{ secrets.FTP_PASSWORD }}"

#         $files = Get-ChildItem -Path $localDir -Recurse -File
#         $successCount = 0
#         $totalFiles = $files.Count

#         Write-Host "üì§ Starting upload of $totalFiles files..."

#         foreach ($file in $files) {
#           $relativePath = $file.FullName.Substring((Get-Item $localDir).FullName.Length)
#           $relativePath = $relativePath.Replace('\', '/')
#           $remotePath = "$remoteDir$relativePath"

#           if (Upload-FtpFile -LocalPath $file.FullName -RemotePath $remotePath -FtpServer $server -Username $username -Password $password) {
#             $successCount++
#           }
#         }

#         Write-Host "üìä Upload Summary: $successCount/$totalFiles files uploaded successfully"

#         if ($successCount -eq $totalFiles) {
#           Write-Host "üéâ All files uploaded successfully!"
#         } else {
#           Write-Host "‚ö†Ô∏è Some files failed to upload. Check logs above."
#         }

#     - name: ‚úÖ Deployment Complete
#       shell: pwsh
#       run: Write-Host "üéâ Successfully deployed to MonsterASP hosting!"
