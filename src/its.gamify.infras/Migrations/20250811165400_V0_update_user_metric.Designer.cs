// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using its.gamify.infras.Datas;

#nullable disable

namespace its.gamify.infras.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250811165400_V0_update_user_metric")]
    partial class V0_update_user_metric
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("its.gamify.domains.Entities.Badge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ClaimedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Challenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<int>("NumOfRoom")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseId");

                    b.ToTable("Challenge");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "classify");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "short_description");

                    b.Property<double>("DurationInHours")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "duration_in_hours");

                    b.Property<string>("IntroVideo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "introduction_video");

                    b.Property<Guid>("IntroVideoId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "introduction_video_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "drafted");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("boolean");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<Guid>("QuarterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "requirement");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "tags");

                    b.PrimitiveCollection<List<string>>("Targets")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "targets");

                    b.Property<Guid>("ThumbnailId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "thumbnail_image_id");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "thumbnail_image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("QuarterId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseCollection");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CompletionCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("integer");

                    b.Property<int>("SaveCount")
                        .HasColumnType("integer");

                    b.Property<double>("StartRating")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.ToTable("CourseMetric");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseParticipation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "course_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EnrolledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "enrolled_Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseParticipation");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseParticipationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<double>("Scrore")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseParticipationId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("CourseResult");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseParticipationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ReviewdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseParticipationId")
                        .IsUnique();

                    b.ToTable("CourseReview");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<int>("OrderedNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSection");

                    b.HasAnnotation("Relational:JsonPropertyName", "modules");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.LeadearBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.ToTable("LeadearBoard");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.LearningMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "course_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "file_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FileId");

                    b.ToTable("LearningMaterial");

                    b.HasAnnotation("Relational:JsonPropertyName", "learning_materials");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.LearningProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseParticipationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuizResultId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<double?>("VideoTimePosition")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CourseParticipationId");

                    b.HasIndex("LessonId");

                    b.HasIndex("QuizResultId");

                    b.ToTable("LearningProgress");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid?>("CourseSectionId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "module_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "duration");

                    b.Property<string>("ImageFiles")
                        .HasColumnType("json");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "quiz_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "video_url");

                    b.HasKey("Id");

                    b.HasIndex("CourseSectionId");

                    b.HasIndex("QuizId")
                        .IsUnique();

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Precedence")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.PracticeTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid?>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("PracticeTag");

                    b.HasAnnotation("Relational:JsonPropertyName", "practices");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Quarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Quarter");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "correct_answer");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "answer_a");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "answer_b");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "answer_c");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "answer_d");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "quiz_id");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("QuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChallengeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<double>("PassedMark")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalMark")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("integer");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Quiz");

                    b.HasAnnotation("Relational:JsonPropertyName", "quiz");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.QuizAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuizResultId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizResultId");

                    b.ToTable("QuizAnswer");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.QuizResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizResult");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71874fd3-1892-4d92-a77f-c85c0d16b8db"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(8341),
                            Description = "",
                            IsDeleted = false,
                            Name = "EMPLOYEE",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(8344)
                        },
                        new
                        {
                            Id = new Guid("620d170e-c32e-4443-b450-32848c1eb5e9"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(9464),
                            Description = "",
                            IsDeleted = false,
                            Name = "LEADER",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(9465)
                        },
                        new
                        {
                            Id = new Guid("3b72db68-b2c6-40d8-859e-b4996f8535a1"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(9497),
                            Description = "",
                            IsDeleted = false,
                            Name = "TRAININGSTAFF",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(9498)
                        },
                        new
                        {
                            Id = new Guid("f7fa7c6b-f76a-4b95-8711-517eb8205a1a"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(9502),
                            Description = "",
                            IsDeleted = false,
                            Name = "MANAGER",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(9502)
                        },
                        new
                        {
                            Id = new Guid("b002d347-66b9-4722-9547-5b2165abaa9f"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(9505),
                            Description = "",
                            IsDeleted = false,
                            Name = "ADMIN",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(2025, 8, 11, 16, 53, 58, 325, DateTimeKind.Utc).AddTicks(9505)
                        });
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BetPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("ChallengeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<int>("CurrentQuestion")
                        .HasColumnType("integer");

                    b.Property<int>("HostScore")
                        .HasColumnType("integer");

                    b.Property<Guid?>("HostUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<bool>("IsHostAnswer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHostReady")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpponentAnswer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpponentReady")
                        .HasColumnType("boolean");

                    b.Property<int>("OpponentScore")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OpponentUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TimePerQuestion")
                        .HasColumnType("integer");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("HostUserId");

                    b.HasIndex("OpponentUserId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<DateTime?>("DateJoined")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "date_joined");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "date_of_birth");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid?>("LeadearBoardId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "phone_number");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea")
                        .HasAnnotation("Relational:JsonPropertyName", "salt");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LeadearBoardId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.UserChallengeHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChallengeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<int>("OppScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("OpponentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("YourScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("OpponentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChallengeHistory");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.UserMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChallengeAwardNum")
                        .HasColumnType("integer");

                    b.Property<int>("ChallengeLoseNum")
                        .HasColumnType("integer");

                    b.Property<int>("ChallengeParticipateNum")
                        .HasColumnType("integer");

                    b.Property<int>("ChallengeWinNum")
                        .HasColumnType("integer");

                    b.Property<int>("ChallengeWinStreak")
                        .HasColumnType("integer");

                    b.Property<int>("CourseCompletedNum")
                        .HasColumnType("integer");

                    b.Property<int>("CourseParticipatedNum")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<int>("PointInQuarter")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuarterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuarterId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMetrics");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Badge", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.User", "User")
                        .WithMany("Badges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Challenge", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.Course", "Course")
                        .WithMany("Challenges")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Course", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.Department", "Deparment")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("its.gamify.domains.Entities.Quarter", "Quarter")
                        .WithMany("Courses")
                        .HasForeignKey("QuarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Deparment");

                    b.Navigation("Quarter");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseCollection", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseParticipation", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Course", "Course")
                        .WithMany("CourseParticipations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.User", "User")
                        .WithMany("CourseParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseResult", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Course", "Course")
                        .WithMany("CourseResults")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.CourseParticipation", "CourseParticipation")
                        .WithOne("CourseResult")
                        .HasForeignKey("its.gamify.domains.Entities.CourseResult", "CourseParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.User", "User")
                        .WithMany("CourseResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseParticipation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseReview", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Course", "Course")
                        .WithMany("CourseReviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.CourseParticipation", "CourseParticipation")
                        .WithOne("CourseReview")
                        .HasForeignKey("its.gamify.domains.Entities.CourseReview", "CourseParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseParticipation");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseSection", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Course", "Course")
                        .WithMany("CourseSections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.LearningMaterial", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Course", "Course")
                        .WithMany("LearningMaterials")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.FileEntity", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("File");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.LearningProgress", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.CourseParticipation", "CourseParticipation")
                        .WithMany("LearningProgresses")
                        .HasForeignKey("CourseParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.QuizResult", "QuizResult")
                        .WithMany()
                        .HasForeignKey("QuizResultId");

                    b.Navigation("CourseParticipation");

                    b.Navigation("Lesson");

                    b.Navigation("QuizResult");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Lesson", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.CourseSection", "CourseSection")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseSectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("its.gamify.domains.Entities.Quiz", "Quiz")
                        .WithOne()
                        .HasForeignKey("its.gamify.domains.Entities.Lesson", "QuizId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CourseSection");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Notification", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.PracticeTag", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Lesson", "Lesson")
                        .WithMany("Practices")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Question", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Quiz", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId");

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.QuizAnswer", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Question", "Question")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.QuizResult", "QuizResult")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuizResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuizResult");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.QuizResult", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Quiz", null)
                        .WithMany("QuizResults")
                        .HasForeignKey("QuizId");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Room", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Challenge", "Challenge")
                        .WithMany("Rooms")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.User", "HostUser")
                        .WithMany()
                        .HasForeignKey("HostUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("its.gamify.domains.Entities.User", "OpponentUser")
                        .WithMany()
                        .HasForeignKey("OpponentUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Challenge");

                    b.Navigation("HostUser");

                    b.Navigation("OpponentUser");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.User", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("its.gamify.domains.Entities.LeadearBoard", null)
                        .WithMany("Users")
                        .HasForeignKey("LeadearBoardId");

                    b.HasOne("its.gamify.domains.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.UserChallengeHistory", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Challenge", "Challenge")
                        .WithMany("UserChallengeHistories")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("its.gamify.domains.Entities.User", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.User", "User")
                        .WithMany("UserChallengeHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Challenge");

                    b.Navigation("Opponent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.UserMetric", b =>
                {
                    b.HasOne("its.gamify.domains.Entities.Quarter", "Quarter")
                        .WithMany("UserMetrics")
                        .HasForeignKey("QuarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("its.gamify.domains.Entities.User", "User")
                        .WithMany("UserMetrics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quarter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Challenge", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("UserChallengeHistories");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Course", b =>
                {
                    b.Navigation("Challenges");

                    b.Navigation("CourseParticipations");

                    b.Navigation("CourseResults");

                    b.Navigation("CourseReviews");

                    b.Navigation("CourseSections");

                    b.Navigation("LearningMaterials");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseParticipation", b =>
                {
                    b.Navigation("CourseResult");

                    b.Navigation("CourseReview");

                    b.Navigation("LearningProgresses");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.CourseSection", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.LeadearBoard", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Lesson", b =>
                {
                    b.Navigation("Practices");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Quarter", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("UserMetrics");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Question", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizResults");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.QuizResult", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("its.gamify.domains.Entities.User", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("CourseParticipations");

                    b.Navigation("CourseResults");

                    b.Navigation("Notifications");

                    b.Navigation("UserChallengeHistories");

                    b.Navigation("UserMetrics");
                });
#pragma warning restore 612, 618
        }
    }
}
